name: Python CI

on:
  push:
    branches: [ main, opt-optimize ] # Trigger on push to main or our feature branch
  pull_request:
    branches: [ main ] # Trigger on pull requests to main

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"] # Test against multiple Python versions

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install project dependencies + dev dependencies like pytest, benchmark, psutil, etc.
        # Assuming they are listed in setup.py's extras_require['dev'] or a requirements-dev.txt
        # If not, list them explicitly:
        pip install -r requirements.txt # If you have a requirements.txt
        pip install pytest pytest-benchmark psutil numpy ortools fastapi uvicorn[standard] sqlalchemy pre-commit black isort
        # Or if using setup.py with extras: pip install .[dev]

    # Optional: Linting and Formatting Check (using pre-commit)
    # - name: Lint with pre-commit
    #   run: |
    #     pre-commit run --all-files

    - name: Run Pytest (including benchmarks)
      run: |
        pytest tests/ --benchmark-json=benchmark_results_${{ matrix.os }}_py${{ matrix.python-version }}.json

    # Optional: Upload benchmark results as artifact
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: benchmark_results_${{ matrix.os }}_py${{ matrix.python-version }}.json
        if-no-files-found: ignore # Don't fail if benchmark json wasn't created
